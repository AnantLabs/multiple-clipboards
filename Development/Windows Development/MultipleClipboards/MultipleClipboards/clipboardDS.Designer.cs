//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MultipleClipboards {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("clipboardDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class clipboardDS : global::System.Data.DataSet {
        
        private general_settingsDataTable tablegeneral_settings;
        
        private clipboardDataTable tableclipboard;
        
        private modifier_key_codesDataTable tablemodifier_key_codes;
        
        private operation_key_codesDataTable tableoperation_key_codes;
        
        private global::System.Data.DataRelation relationFK_accessor_key_codes_clipboard1;
        
        private global::System.Data.DataRelation relationFK_accessor_key_codes_clipboard;
        
        private global::System.Data.DataRelation relationoperation_key_codes_clipboard_copy;
        
        private global::System.Data.DataRelation relationoperation_key_codes_clipboard_cut;
        
        private global::System.Data.DataRelation relationoperation_key_codes_clipboard_paste;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public clipboardDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected clipboardDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["general_settings"] != null)) {
                    base.Tables.Add(new general_settingsDataTable(ds.Tables["general_settings"]));
                }
                if ((ds.Tables["clipboard"] != null)) {
                    base.Tables.Add(new clipboardDataTable(ds.Tables["clipboard"]));
                }
                if ((ds.Tables["modifier_key_codes"] != null)) {
                    base.Tables.Add(new modifier_key_codesDataTable(ds.Tables["modifier_key_codes"]));
                }
                if ((ds.Tables["operation_key_codes"] != null)) {
                    base.Tables.Add(new operation_key_codesDataTable(ds.Tables["operation_key_codes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public general_settingsDataTable general_settings {
            get {
                return this.tablegeneral_settings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public clipboardDataTable clipboard {
            get {
                return this.tableclipboard;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public modifier_key_codesDataTable modifier_key_codes {
            get {
                return this.tablemodifier_key_codes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public operation_key_codesDataTable operation_key_codes {
            get {
                return this.tableoperation_key_codes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            clipboardDS cln = ((clipboardDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["general_settings"] != null)) {
                    base.Tables.Add(new general_settingsDataTable(ds.Tables["general_settings"]));
                }
                if ((ds.Tables["clipboard"] != null)) {
                    base.Tables.Add(new clipboardDataTable(ds.Tables["clipboard"]));
                }
                if ((ds.Tables["modifier_key_codes"] != null)) {
                    base.Tables.Add(new modifier_key_codesDataTable(ds.Tables["modifier_key_codes"]));
                }
                if ((ds.Tables["operation_key_codes"] != null)) {
                    base.Tables.Add(new operation_key_codesDataTable(ds.Tables["operation_key_codes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablegeneral_settings = ((general_settingsDataTable)(base.Tables["general_settings"]));
            if ((initTable == true)) {
                if ((this.tablegeneral_settings != null)) {
                    this.tablegeneral_settings.InitVars();
                }
            }
            this.tableclipboard = ((clipboardDataTable)(base.Tables["clipboard"]));
            if ((initTable == true)) {
                if ((this.tableclipboard != null)) {
                    this.tableclipboard.InitVars();
                }
            }
            this.tablemodifier_key_codes = ((modifier_key_codesDataTable)(base.Tables["modifier_key_codes"]));
            if ((initTable == true)) {
                if ((this.tablemodifier_key_codes != null)) {
                    this.tablemodifier_key_codes.InitVars();
                }
            }
            this.tableoperation_key_codes = ((operation_key_codesDataTable)(base.Tables["operation_key_codes"]));
            if ((initTable == true)) {
                if ((this.tableoperation_key_codes != null)) {
                    this.tableoperation_key_codes.InitVars();
                }
            }
            this.relationFK_accessor_key_codes_clipboard1 = this.Relations["FK_accessor_key_codes_clipboard1"];
            this.relationFK_accessor_key_codes_clipboard = this.Relations["FK_accessor_key_codes_clipboard"];
            this.relationoperation_key_codes_clipboard_copy = this.Relations["operation_key_codes_clipboard_copy"];
            this.relationoperation_key_codes_clipboard_cut = this.Relations["operation_key_codes_clipboard_cut"];
            this.relationoperation_key_codes_clipboard_paste = this.Relations["operation_key_codes_clipboard_paste"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "clipboardDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/clipboardDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablegeneral_settings = new general_settingsDataTable();
            base.Tables.Add(this.tablegeneral_settings);
            this.tableclipboard = new clipboardDataTable();
            base.Tables.Add(this.tableclipboard);
            this.tablemodifier_key_codes = new modifier_key_codesDataTable();
            base.Tables.Add(this.tablemodifier_key_codes);
            this.tableoperation_key_codes = new operation_key_codesDataTable();
            base.Tables.Add(this.tableoperation_key_codes);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_accessor_key_codes_clipboard1", new global::System.Data.DataColumn[] {
                        this.tablemodifier_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.modifier_key_2Column});
            this.tableclipboard.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_accessor_key_codes_clipboard", new global::System.Data.DataColumn[] {
                        this.tablemodifier_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.modifier_key_1Column});
            this.tableclipboard.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("operation_key_codes_clipboard_copy", new global::System.Data.DataColumn[] {
                        this.tableoperation_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.copy_keyColumn});
            this.tableclipboard.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("operation_key_codes_clipboard_cut", new global::System.Data.DataColumn[] {
                        this.tableoperation_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.cut_keyColumn});
            this.tableclipboard.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("operation_key_codes_clipboard_paste", new global::System.Data.DataColumn[] {
                        this.tableoperation_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.paste_keyColumn});
            this.tableclipboard.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_accessor_key_codes_clipboard1 = new global::System.Data.DataRelation("FK_accessor_key_codes_clipboard1", new global::System.Data.DataColumn[] {
                        this.tablemodifier_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.modifier_key_2Column}, false);
            this.Relations.Add(this.relationFK_accessor_key_codes_clipboard1);
            this.relationFK_accessor_key_codes_clipboard = new global::System.Data.DataRelation("FK_accessor_key_codes_clipboard", new global::System.Data.DataColumn[] {
                        this.tablemodifier_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.modifier_key_1Column}, false);
            this.Relations.Add(this.relationFK_accessor_key_codes_clipboard);
            this.relationoperation_key_codes_clipboard_copy = new global::System.Data.DataRelation("operation_key_codes_clipboard_copy", new global::System.Data.DataColumn[] {
                        this.tableoperation_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.copy_keyColumn}, false);
            this.Relations.Add(this.relationoperation_key_codes_clipboard_copy);
            this.relationoperation_key_codes_clipboard_cut = new global::System.Data.DataRelation("operation_key_codes_clipboard_cut", new global::System.Data.DataColumn[] {
                        this.tableoperation_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.cut_keyColumn}, false);
            this.Relations.Add(this.relationoperation_key_codes_clipboard_cut);
            this.relationoperation_key_codes_clipboard_paste = new global::System.Data.DataRelation("operation_key_codes_clipboard_paste", new global::System.Data.DataColumn[] {
                        this.tableoperation_key_codes.key_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableclipboard.paste_keyColumn}, false);
            this.Relations.Add(this.relationoperation_key_codes_clipboard_paste);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegeneral_settings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeclipboard() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemodifier_key_codes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeoperation_key_codes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            clipboardDS ds = new clipboardDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void general_settingsRowChangeEventHandler(object sender, general_settingsRowChangeEvent e);
        
        public delegate void clipboardRowChangeEventHandler(object sender, clipboardRowChangeEvent e);
        
        public delegate void modifier_key_codesRowChangeEventHandler(object sender, modifier_key_codesRowChangeEvent e);
        
        public delegate void operation_key_codesRowChangeEventHandler(object sender, operation_key_codesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class general_settingsDataTable : global::System.Data.TypedTableBase<general_settingsRow> {
            
            private global::System.Data.DataColumn columnnumber_of_clipboards;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public general_settingsDataTable() {
                this.TableName = "general_settings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal general_settingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected general_settingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn number_of_clipboardsColumn {
                get {
                    return this.columnnumber_of_clipboards;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public general_settingsRow this[int index] {
                get {
                    return ((general_settingsRow)(this.Rows[index]));
                }
            }
            
            public event general_settingsRowChangeEventHandler general_settingsRowChanging;
            
            public event general_settingsRowChangeEventHandler general_settingsRowChanged;
            
            public event general_settingsRowChangeEventHandler general_settingsRowDeleting;
            
            public event general_settingsRowChangeEventHandler general_settingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addgeneral_settingsRow(general_settingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public general_settingsRow Addgeneral_settingsRow(int number_of_clipboards) {
                general_settingsRow rowgeneral_settingsRow = ((general_settingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        number_of_clipboards};
                rowgeneral_settingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowgeneral_settingsRow);
                return rowgeneral_settingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public general_settingsRow FindBynumber_of_clipboards(int number_of_clipboards) {
                return ((general_settingsRow)(this.Rows.Find(new object[] {
                            number_of_clipboards})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                general_settingsDataTable cln = ((general_settingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new general_settingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnumber_of_clipboards = base.Columns["number_of_clipboards"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnumber_of_clipboards = new global::System.Data.DataColumn("number_of_clipboards", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumber_of_clipboards);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnnumber_of_clipboards}, true));
                this.columnnumber_of_clipboards.AllowDBNull = false;
                this.columnnumber_of_clipboards.Unique = true;
                this.columnnumber_of_clipboards.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public general_settingsRow Newgeneral_settingsRow() {
                return ((general_settingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new general_settingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(general_settingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.general_settingsRowChanged != null)) {
                    this.general_settingsRowChanged(this, new general_settingsRowChangeEvent(((general_settingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.general_settingsRowChanging != null)) {
                    this.general_settingsRowChanging(this, new general_settingsRowChangeEvent(((general_settingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.general_settingsRowDeleted != null)) {
                    this.general_settingsRowDeleted(this, new general_settingsRowChangeEvent(((general_settingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.general_settingsRowDeleting != null)) {
                    this.general_settingsRowDeleting(this, new general_settingsRowChangeEvent(((general_settingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removegeneral_settingsRow(general_settingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clipboardDS ds = new clipboardDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "general_settingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class clipboardDataTable : global::System.Data.TypedTableBase<clipboardRow> {
            
            private global::System.Data.DataColumn columnnumber;
            
            private global::System.Data.DataColumn columnmodifier_key_1;
            
            private global::System.Data.DataColumn columnmodifier_key_2;
            
            private global::System.Data.DataColumn columncopy_key;
            
            private global::System.Data.DataColumn columncut_key;
            
            private global::System.Data.DataColumn columnpaste_key;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardDataTable() {
                this.TableName = "clipboard";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal clipboardDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected clipboardDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numberColumn {
                get {
                    return this.columnnumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modifier_key_1Column {
                get {
                    return this.columnmodifier_key_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modifier_key_2Column {
                get {
                    return this.columnmodifier_key_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn copy_keyColumn {
                get {
                    return this.columncopy_key;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cut_keyColumn {
                get {
                    return this.columncut_key;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paste_keyColumn {
                get {
                    return this.columnpaste_key;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRow this[int index] {
                get {
                    return ((clipboardRow)(this.Rows[index]));
                }
            }
            
            public event clipboardRowChangeEventHandler clipboardRowChanging;
            
            public event clipboardRowChangeEventHandler clipboardRowChanged;
            
            public event clipboardRowChangeEventHandler clipboardRowDeleting;
            
            public event clipboardRowChangeEventHandler clipboardRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddclipboardRow(clipboardRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRow AddclipboardRow(int number, modifier_key_codesRow parentmodifier_key_codesRowByFK_accessor_key_codes_clipboard, modifier_key_codesRow parentmodifier_key_codesRowByFK_accessor_key_codes_clipboard1, operation_key_codesRow parentoperation_key_codesRowByoperation_key_codes_clipboard_copy, operation_key_codesRow parentoperation_key_codesRowByoperation_key_codes_clipboard_cut, operation_key_codesRow parentoperation_key_codesRowByoperation_key_codes_clipboard_paste) {
                clipboardRow rowclipboardRow = ((clipboardRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        number,
                        null,
                        null,
                        null,
                        null,
                        null};
                if ((parentmodifier_key_codesRowByFK_accessor_key_codes_clipboard != null)) {
                    columnValuesArray[1] = parentmodifier_key_codesRowByFK_accessor_key_codes_clipboard[0];
                }
                if ((parentmodifier_key_codesRowByFK_accessor_key_codes_clipboard1 != null)) {
                    columnValuesArray[2] = parentmodifier_key_codesRowByFK_accessor_key_codes_clipboard1[0];
                }
                if ((parentoperation_key_codesRowByoperation_key_codes_clipboard_copy != null)) {
                    columnValuesArray[3] = parentoperation_key_codesRowByoperation_key_codes_clipboard_copy[0];
                }
                if ((parentoperation_key_codesRowByoperation_key_codes_clipboard_cut != null)) {
                    columnValuesArray[4] = parentoperation_key_codesRowByoperation_key_codes_clipboard_cut[0];
                }
                if ((parentoperation_key_codesRowByoperation_key_codes_clipboard_paste != null)) {
                    columnValuesArray[5] = parentoperation_key_codesRowByoperation_key_codes_clipboard_paste[0];
                }
                rowclipboardRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowclipboardRow);
                return rowclipboardRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                clipboardDataTable cln = ((clipboardDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new clipboardDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnumber = base.Columns["number"];
                this.columnmodifier_key_1 = base.Columns["modifier_key_1"];
                this.columnmodifier_key_2 = base.Columns["modifier_key_2"];
                this.columncopy_key = base.Columns["copy_key"];
                this.columncut_key = base.Columns["cut_key"];
                this.columnpaste_key = base.Columns["paste_key"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnumber = new global::System.Data.DataColumn("number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumber);
                this.columnmodifier_key_1 = new global::System.Data.DataColumn("modifier_key_1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodifier_key_1);
                this.columnmodifier_key_2 = new global::System.Data.DataColumn("modifier_key_2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodifier_key_2);
                this.columncopy_key = new global::System.Data.DataColumn("copy_key", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncopy_key);
                this.columncut_key = new global::System.Data.DataColumn("cut_key", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncut_key);
                this.columnpaste_key = new global::System.Data.DataColumn("paste_key", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpaste_key);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnnumber}, false));
                this.columnnumber.AllowDBNull = false;
                this.columnnumber.Unique = true;
                this.columnnumber.DefaultValue = ((int)(0));
                this.columnmodifier_key_1.AllowDBNull = false;
                this.columnmodifier_key_1.DefaultValue = ((int)(0));
                this.columnmodifier_key_2.AllowDBNull = false;
                this.columnmodifier_key_2.DefaultValue = ((int)(0));
                this.columncopy_key.AllowDBNull = false;
                this.columncopy_key.DefaultValue = ((int)(0));
                this.columncut_key.AllowDBNull = false;
                this.columncut_key.DefaultValue = ((int)(0));
                this.columnpaste_key.AllowDBNull = false;
                this.columnpaste_key.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRow NewclipboardRow() {
                return ((clipboardRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new clipboardRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(clipboardRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.clipboardRowChanged != null)) {
                    this.clipboardRowChanged(this, new clipboardRowChangeEvent(((clipboardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.clipboardRowChanging != null)) {
                    this.clipboardRowChanging(this, new clipboardRowChangeEvent(((clipboardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.clipboardRowDeleted != null)) {
                    this.clipboardRowDeleted(this, new clipboardRowChangeEvent(((clipboardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.clipboardRowDeleting != null)) {
                    this.clipboardRowDeleting(this, new clipboardRowChangeEvent(((clipboardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveclipboardRow(clipboardRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clipboardDS ds = new clipboardDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "clipboardDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class modifier_key_codesDataTable : global::System.Data.TypedTableBase<modifier_key_codesRow> {
            
            private global::System.Data.DataColumn columnkey_code;
            
            private global::System.Data.DataColumn columndisplay_text;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modifier_key_codesDataTable() {
                this.TableName = "modifier_key_codes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal modifier_key_codesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected modifier_key_codesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn key_codeColumn {
                get {
                    return this.columnkey_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn display_textColumn {
                get {
                    return this.columndisplay_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modifier_key_codesRow this[int index] {
                get {
                    return ((modifier_key_codesRow)(this.Rows[index]));
                }
            }
            
            public event modifier_key_codesRowChangeEventHandler modifier_key_codesRowChanging;
            
            public event modifier_key_codesRowChangeEventHandler modifier_key_codesRowChanged;
            
            public event modifier_key_codesRowChangeEventHandler modifier_key_codesRowDeleting;
            
            public event modifier_key_codesRowChangeEventHandler modifier_key_codesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addmodifier_key_codesRow(modifier_key_codesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modifier_key_codesRow Addmodifier_key_codesRow(int key_code, string display_text) {
                modifier_key_codesRow rowmodifier_key_codesRow = ((modifier_key_codesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        key_code,
                        display_text};
                rowmodifier_key_codesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmodifier_key_codesRow);
                return rowmodifier_key_codesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                modifier_key_codesDataTable cln = ((modifier_key_codesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new modifier_key_codesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnkey_code = base.Columns["key_code"];
                this.columndisplay_text = base.Columns["display_text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnkey_code = new global::System.Data.DataColumn("key_code", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkey_code);
                this.columndisplay_text = new global::System.Data.DataColumn("display_text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndisplay_text);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnkey_code}, false));
                this.columnkey_code.AllowDBNull = false;
                this.columnkey_code.Unique = true;
                this.columnkey_code.DefaultValue = ((int)(0));
                this.columndisplay_text.AllowDBNull = false;
                this.columndisplay_text.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modifier_key_codesRow Newmodifier_key_codesRow() {
                return ((modifier_key_codesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new modifier_key_codesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(modifier_key_codesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.modifier_key_codesRowChanged != null)) {
                    this.modifier_key_codesRowChanged(this, new modifier_key_codesRowChangeEvent(((modifier_key_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.modifier_key_codesRowChanging != null)) {
                    this.modifier_key_codesRowChanging(this, new modifier_key_codesRowChangeEvent(((modifier_key_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.modifier_key_codesRowDeleted != null)) {
                    this.modifier_key_codesRowDeleted(this, new modifier_key_codesRowChangeEvent(((modifier_key_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.modifier_key_codesRowDeleting != null)) {
                    this.modifier_key_codesRowDeleting(this, new modifier_key_codesRowChangeEvent(((modifier_key_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removemodifier_key_codesRow(modifier_key_codesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clipboardDS ds = new clipboardDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "modifier_key_codesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class operation_key_codesDataTable : global::System.Data.TypedTableBase<operation_key_codesRow> {
            
            private global::System.Data.DataColumn columnkey_code;
            
            private global::System.Data.DataColumn columndisplay_text;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public operation_key_codesDataTable() {
                this.TableName = "operation_key_codes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal operation_key_codesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected operation_key_codesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn key_codeColumn {
                get {
                    return this.columnkey_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn display_textColumn {
                get {
                    return this.columndisplay_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public operation_key_codesRow this[int index] {
                get {
                    return ((operation_key_codesRow)(this.Rows[index]));
                }
            }
            
            public event operation_key_codesRowChangeEventHandler operation_key_codesRowChanging;
            
            public event operation_key_codesRowChangeEventHandler operation_key_codesRowChanged;
            
            public event operation_key_codesRowChangeEventHandler operation_key_codesRowDeleting;
            
            public event operation_key_codesRowChangeEventHandler operation_key_codesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addoperation_key_codesRow(operation_key_codesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public operation_key_codesRow Addoperation_key_codesRow(int key_code, string display_text) {
                operation_key_codesRow rowoperation_key_codesRow = ((operation_key_codesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        key_code,
                        display_text};
                rowoperation_key_codesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowoperation_key_codesRow);
                return rowoperation_key_codesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                operation_key_codesDataTable cln = ((operation_key_codesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new operation_key_codesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnkey_code = base.Columns["key_code"];
                this.columndisplay_text = base.Columns["display_text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnkey_code = new global::System.Data.DataColumn("key_code", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkey_code);
                this.columndisplay_text = new global::System.Data.DataColumn("display_text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndisplay_text);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnkey_code}, false));
                this.columnkey_code.AllowDBNull = false;
                this.columnkey_code.Unique = true;
                this.columnkey_code.DefaultValue = ((int)(0));
                this.columndisplay_text.AllowDBNull = false;
                this.columndisplay_text.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public operation_key_codesRow Newoperation_key_codesRow() {
                return ((operation_key_codesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new operation_key_codesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(operation_key_codesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.operation_key_codesRowChanged != null)) {
                    this.operation_key_codesRowChanged(this, new operation_key_codesRowChangeEvent(((operation_key_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.operation_key_codesRowChanging != null)) {
                    this.operation_key_codesRowChanging(this, new operation_key_codesRowChangeEvent(((operation_key_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.operation_key_codesRowDeleted != null)) {
                    this.operation_key_codesRowDeleted(this, new operation_key_codesRowChangeEvent(((operation_key_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.operation_key_codesRowDeleting != null)) {
                    this.operation_key_codesRowDeleting(this, new operation_key_codesRowChangeEvent(((operation_key_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeoperation_key_codesRow(operation_key_codesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clipboardDS ds = new clipboardDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "operation_key_codesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class general_settingsRow : global::System.Data.DataRow {
            
            private general_settingsDataTable tablegeneral_settings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal general_settingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegeneral_settings = ((general_settingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int number_of_clipboards {
                get {
                    return ((int)(this[this.tablegeneral_settings.number_of_clipboardsColumn]));
                }
                set {
                    this[this.tablegeneral_settings.number_of_clipboardsColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class clipboardRow : global::System.Data.DataRow {
            
            private clipboardDataTable tableclipboard;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal clipboardRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableclipboard = ((clipboardDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int number {
                get {
                    return ((int)(this[this.tableclipboard.numberColumn]));
                }
                set {
                    this[this.tableclipboard.numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int modifier_key_1 {
                get {
                    return ((int)(this[this.tableclipboard.modifier_key_1Column]));
                }
                set {
                    this[this.tableclipboard.modifier_key_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int modifier_key_2 {
                get {
                    return ((int)(this[this.tableclipboard.modifier_key_2Column]));
                }
                set {
                    this[this.tableclipboard.modifier_key_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int copy_key {
                get {
                    return ((int)(this[this.tableclipboard.copy_keyColumn]));
                }
                set {
                    this[this.tableclipboard.copy_keyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cut_key {
                get {
                    return ((int)(this[this.tableclipboard.cut_keyColumn]));
                }
                set {
                    this[this.tableclipboard.cut_keyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int paste_key {
                get {
                    return ((int)(this[this.tableclipboard.paste_keyColumn]));
                }
                set {
                    this[this.tableclipboard.paste_keyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modifier_key_codesRow modifier_key_codesRowByFK_accessor_key_codes_clipboard1 {
                get {
                    return ((modifier_key_codesRow)(this.GetParentRow(this.Table.ParentRelations["FK_accessor_key_codes_clipboard1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_accessor_key_codes_clipboard1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modifier_key_codesRow modifier_key_codesRowByFK_accessor_key_codes_clipboard {
                get {
                    return ((modifier_key_codesRow)(this.GetParentRow(this.Table.ParentRelations["FK_accessor_key_codes_clipboard"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_accessor_key_codes_clipboard"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public operation_key_codesRow operation_key_codesRowByoperation_key_codes_clipboard_copy {
                get {
                    return ((operation_key_codesRow)(this.GetParentRow(this.Table.ParentRelations["operation_key_codes_clipboard_copy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["operation_key_codes_clipboard_copy"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public operation_key_codesRow operation_key_codesRowByoperation_key_codes_clipboard_cut {
                get {
                    return ((operation_key_codesRow)(this.GetParentRow(this.Table.ParentRelations["operation_key_codes_clipboard_cut"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["operation_key_codes_clipboard_cut"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public operation_key_codesRow operation_key_codesRowByoperation_key_codes_clipboard_paste {
                get {
                    return ((operation_key_codesRow)(this.GetParentRow(this.Table.ParentRelations["operation_key_codes_clipboard_paste"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["operation_key_codes_clipboard_paste"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class modifier_key_codesRow : global::System.Data.DataRow {
            
            private modifier_key_codesDataTable tablemodifier_key_codes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal modifier_key_codesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemodifier_key_codes = ((modifier_key_codesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int key_code {
                get {
                    return ((int)(this[this.tablemodifier_key_codes.key_codeColumn]));
                }
                set {
                    this[this.tablemodifier_key_codes.key_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string display_text {
                get {
                    return ((string)(this[this.tablemodifier_key_codes.display_textColumn]));
                }
                set {
                    this[this.tablemodifier_key_codes.display_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRow[] GetclipboardRowsByFK_accessor_key_codes_clipboard1() {
                if ((this.Table.ChildRelations["FK_accessor_key_codes_clipboard1"] == null)) {
                    return new clipboardRow[0];
                }
                else {
                    return ((clipboardRow[])(base.GetChildRows(this.Table.ChildRelations["FK_accessor_key_codes_clipboard1"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRow[] GetclipboardRows() {
                if ((this.Table.ChildRelations["FK_accessor_key_codes_clipboard"] == null)) {
                    return new clipboardRow[0];
                }
                else {
                    return ((clipboardRow[])(base.GetChildRows(this.Table.ChildRelations["FK_accessor_key_codes_clipboard"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class operation_key_codesRow : global::System.Data.DataRow {
            
            private operation_key_codesDataTable tableoperation_key_codes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal operation_key_codesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableoperation_key_codes = ((operation_key_codesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int key_code {
                get {
                    return ((int)(this[this.tableoperation_key_codes.key_codeColumn]));
                }
                set {
                    this[this.tableoperation_key_codes.key_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string display_text {
                get {
                    return ((string)(this[this.tableoperation_key_codes.display_textColumn]));
                }
                set {
                    this[this.tableoperation_key_codes.display_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRow[] GetclipboardRowsByoperation_key_codes_clipboard_copy() {
                if ((this.Table.ChildRelations["operation_key_codes_clipboard_copy"] == null)) {
                    return new clipboardRow[0];
                }
                else {
                    return ((clipboardRow[])(base.GetChildRows(this.Table.ChildRelations["operation_key_codes_clipboard_copy"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRow[] GetclipboardRowsByoperation_key_codes_clipboard_cut() {
                if ((this.Table.ChildRelations["operation_key_codes_clipboard_cut"] == null)) {
                    return new clipboardRow[0];
                }
                else {
                    return ((clipboardRow[])(base.GetChildRows(this.Table.ChildRelations["operation_key_codes_clipboard_cut"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRow[] GetclipboardRowsByoperation_key_codes_clipboard_paste() {
                if ((this.Table.ChildRelations["operation_key_codes_clipboard_paste"] == null)) {
                    return new clipboardRow[0];
                }
                else {
                    return ((clipboardRow[])(base.GetChildRows(this.Table.ChildRelations["operation_key_codes_clipboard_paste"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class general_settingsRowChangeEvent : global::System.EventArgs {
            
            private general_settingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public general_settingsRowChangeEvent(general_settingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public general_settingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class clipboardRowChangeEvent : global::System.EventArgs {
            
            private clipboardRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRowChangeEvent(clipboardRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public clipboardRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class modifier_key_codesRowChangeEvent : global::System.EventArgs {
            
            private modifier_key_codesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modifier_key_codesRowChangeEvent(modifier_key_codesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public modifier_key_codesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class operation_key_codesRowChangeEvent : global::System.EventArgs {
            
            private operation_key_codesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public operation_key_codesRowChangeEvent(operation_key_codesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public operation_key_codesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591